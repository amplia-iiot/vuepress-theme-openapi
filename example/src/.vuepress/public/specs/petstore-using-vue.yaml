openapi: 3.0.0
info:
  title: OpenGate Areas
  version: 1.0.0
  description: |-
    This API lets you manage geographical areas in OpenGate.
  contact:
    name: OpenGate
    email: info@amplia.es
    url: "https://www.opengate.es"
servers:
  - url: "https://api.opengate.es"
security:
  - ApiKeyAmplia: []
paths:
  /north/v80/search/areas:
    post:
      tags:
        - Searching Areas
      requestBody:
        description: |-
          The OpenGate API query allows to obtain different platform areas.
          They will be only those on which the user who performs the query has
          visualization capacity for his domain / organization.
        content:
          application/json:
            schema:
              $ref: "schemas.json#/search"
            examples:
              Area geometry filter:
                description: |-
                  If you can search by geometry exists the within option to indicate every areas that contains this coordenate.
                value:
                  filter:
                    within:
                      areas.geometry:
                        - 2.173200845718384
                        - 41.36735636905808
      responses:
        200:
          description: |-
            Expected response to a valid request. 

            An example of response could be something like this:
          content:
            application/json:
              example:
                - organization: organization_area
                  identifier: area_id
                  name: Warehouse
                  description: Warehouse of machinery
                  geometry: {}
                  entities:
                    - identifier1
                - organization: organization_area
                  identifier: area_id2
                  name: Workshop
                  description: Tools workshop
                  geometry:
                    type: Polygon
                    coordinates:
                      - - - 2.173200845718384
                          - 41.36735636905808
                        - - 2.179992198944092
                          - 41.364771670743316
                        - - 2.1802926063537598
                          - 41.36514206995068
                  entities: []
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "schemas.json#/Error"
  /north/v80/provision/organizations/{organizationName}/areas:
    post:
      tags:
        - New Area
      summary: Add news Area
      description: |-
        New areas can be created by sending a `POST` request using the URL above,
        including a correctly formatted JSON document in the `POST` body. 

        Let’s show first two types of json in function (on the next examples) how
        is determined the geographic zone by a geojson or adevices gorup.
        Next, the possibility to have information both of them (geojson and devices group).
      parameters:
        - in: path
          name: organizationName
          required: true
          schema:
            type: string
            description: Adds on the url path the organization name.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "schemas.json#/Areas"
            examples:
              Area determinated by a devices group as JSON object:
                value:
                  identifier: Id
                  name: area name
                  description: description
                  geometry: {}
                  entities:
                    - identifier1
              Area determinated by a geojson as JSON object:
                description: The polygon must have the first point and the last one equal. That’s how it’s closed.
                value:
                  identifier: id
                  name: area name
                  description: description
                  geometry:
                    type: Polygon
                    coordinates:
                      - - - 2.173200845718384
                          - 41.36735636905808
                        - - 2.179992198944092
                          - 41.364771670743316
                        - - 2.1802926063537598
                          - 41.36514206995068
                        - - 2.1783506870269775
                          - 41.36581039362086
                        - - 2.175893783569336
                          - 41.36669611320903
                        - - 2.1749818325042725
                          - 41.36675247677479
                        - - 2.174273729324341
                          - 41.36718727978374
                        - - 2.173200845718384
                          - 41.36735636905808
              Area determinated by a geojson and a devices group as JSON object:
                value:
                  identifier: Id
                  name: area name
                  description: description
                  geometry:
                    type: Polygon
                    coordinates:
                      - - - 2.173200845718384
                          - 41.36735636905808
                        - - 2.179992198944092
                          - 41.364771670743316
                        - - 2.1802926063537598
                          - 41.36514206995068
                        - - 2.1783506870269775
                          - 41.36581039362086
                        - - 2.175893783569336
                          - 41.36669611320903
                        - - 2.1749818325042725
                          - 41.36675247677479
                        - - 2.174273729324341
                          - 41.36718727978374
                        - - 2.173200845718384
                          - 41.36735636905808
                  entities:
                    - identifier1
      responses:
        201:
          description: |-
            Expected response to a valid request.

            In the response we should see a status code of 201 (created) and a location
            header which tells us the location (including the assigned identifier) of the
            newly created area.
            Let’s look the response:
          headers:
            Location:
              schema:
                type: string
              description: This headers includes the location information plus (at the end) the area id.
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "schemas.json#/Error"
  /north/v80/provision/organizations/{organizationName}/areas/{identifier}:
    get:
      tags:
        - Existing Area
      summary: Reading Area
      description: |-
        You can apply for the area sending a GET request using the URL above.
        You must replace {identifier} with the identifier of the area you want to retrieve.
      parameters:
        - in: path
          name: organizationName
          required: true
          schema:
            type: string
            description: Adds on the url path the organization name.
        - name: identifier
          in: path
          required: true
          description: The id of the datamodel you want to get
          schema:
            type: string
      responses:
        200:
          description: |-
            Expected response to a valid request.

            The response could be somenthing like this.
          content:
            application/json:
              example:
                organization: organization_area
                identifier: Id
                name: area name
                description: description
                geometry: {}
                entities:
                  - identifier1
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "schemas.json#/Error"
    put:
      tags:
        - Existing Area
      summary: Updating Area
      description: It is allowed updating all the fields except the identifier.
      parameters:
        - in: path
          name: organizationName
          required: true
          schema:
            type: string
            description: Adds on the url path the organization name.
        - name: identifier
          in: path
          required: true
          description: The id of the datamodel you want to update
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "schemas.json#/Areas"
            example:
              value:
                name: area name
                description: description
                geometry: {}
                entities:
                  - identifier1
      responses:
        200:
          description: Expected response to a valid request
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "schemas.json#/Error"
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "schemas.json#/Error"
    delete:
      tags:
        - Existing Area
      summary: deleting Area
      description: |-
        You can delete areas by sending a `DELETE` request using the URL above.
        You must replace `{identifier}` with the identifier of the area you want to delete.
      parameters:
        - in: path
          name: organizationName
          required: true
          schema:
            type: string
            description: Adds on the url path the organization name.
        - name: identifier
          in: path
          required: true
          description: The id of the datamodel you want to delete
          schema:
            type: string
      responses:
        200:
          description: Expected response to a valid request
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "schemas.json#/Error"
components:
  securitySchemes:
    ApiKeyAmplia:
      type: apiKey
      in: header
      name: X-ApiKey
      description: Api Key de acceso al servidor.
  schemas:
    Areas:
      properties:
        identifier:
          description: |-
            Identifier of the area.
            This field can be included in the creation option and if it is not included it will automatically assign a uuid.
          type: string
          example: <area_id>
        name:
          description: Name of the area. This field is optional.
          type: string
          example: <area_identifier>
        description:
          description: Description of the area. This field is optional.
          type: string
          example: <description>
        geometry:
          description: |-
            Geojson. It contains a type and coordenates of the area.
            The area supports the following geometry types: Point, Polygon and MultiPolygon.
          type: object
          properties:
            type:
              type: string
              enum:
                - Point
                - Polygon
                - MultiPolygon
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: number
                  example:
                    - 2.173200845718384
                    - 41.36735636905808
        entities:
          description: Array of identifiers of entities that defining an area.
          type: array
          minItems: 1
          items:
            type: string
    filter_fields:
      description: "Simple field for filtering, same as Area's fields"
      type: object
      minProperties: 1
      maxProperties: 1
      anyOf:
        - properties:
            areas.name:
              description: Name of the area. This field is optional.
              type: string
              example: <area_identifier>
        - properties:
            areas.identifier:
              description: |-
                Identifier of the area.
                This field can be included in the creation option and if it is not included it will automatically assign a uuid.
              type: string
              example: <area_id>
        - properties:
            areas.description:
              description: Description of the area. This field is optional.
              type: string
              example: <description>
        - properties:
            rule.organization:
              description: organization of the area
              type: string
        - properties:
            areas.entities:
              description: Array of identifiers of entities that defining an area.
              type: array
              minItems: 1
              items:
                type: string
        - properties:
            areas.geometry:
              description: |-
                Geojson. It contains a type and coordenates of the area.
                The area supports the following geometry types: Point, Polygon and MultiPolygon.
              type: object
              properties:
                type:
                  type: string
                  enum:
                    - Point
                    - Polygon
                    - MultiPolygon
                coordinates:
                  type: array
                  items:
                    type: array
                    items:
                      type: number
                      example:
                        - 2.173200845718384
                        - 41.36735636905808
    filter:
      type: object
      properties:
        and:
          type: array
          minItems: 1
          items:
            $ref: "schemas.json#/filter"
        or:
          type: array
          minItems: 1
          items:
            $ref: "schemas.json#/filter"
        like:
          $ref: "schemas.json#/filter_fields"
        eq:
          $ref: "schemas.json#/filter_fields"
        neq:
          $ref: "schemas.json#/filter_fields"
        gt:
          $ref: "schemas.json#/filter_fields"
        lt:
          $ref: "schemas.json#/filter_fields"
        gte:
          $ref: "schemas.json#/filter_fields"
        lte:
          $ref: "schemas.json#/filter_fields"
        in:
          $ref: "schemas.json#/array_field"
        nin:
          $ref: "schemas.json#/array_field"
        exists:
          $ref: "schemas.json#/boolean_field"
        within:
          $ref: "schemas.json#/geometry_field"
    search:
      type: object
      properties:
        filter:
          $ref: "schemas.json#/filter_fields"
        limit:
          $ref: "schemas.json#/limit"
        sort:
          $ref: "schemas.json#/sort"
        group:
          $ref: "schemas.json#/group"
        select:
          $ref: "schemas.json#/select"
